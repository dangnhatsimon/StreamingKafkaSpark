version: "3"

x-spark-common: &spark-common
  build:
    context: .
    dockerfile: ./Dockerfile
  volumes:
    - ./config:/opt/spark/conf
    - ./jobs:/opt/spark/jobs
    - ./datasets:/opt/spark/datasets
    - ./spark-events:/opt/spark/spark-events
    - ./spark-warehouse:/opt/spark/spark-warehouse
    - ./spark-checkpoint:/opt/spark/spark-checkpoint
    - ./spark-state:/opt/spark/spark-state
    - ./spark-archive:/opt/spark/spark-archive
  env_file:
    - .env.spark
  networks:
    - kafka-streaming
  depends_on:
    postgres:
      condition: service_healthy


services:
  postgres:
    image: postgres:13
    container_name: postgres
    environment:
      POSTGRES_USER: metastore_db
      POSTGRES_PASSWORD: metastore_db
      POSTGRES_DB: metastore_db
      SPARK_USER: spark_db
      SPARK_PASSWORD: spark_db
      SPARK_DB: spark_db
    volumes:
      - postgres-db-volume:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD", "pg_isready", "-U", "metastore_db" ]
      interval: 10s
      retries: 5
      start_period: 5s
    restart: always
    networks:
      - kafka-streaming

  spark-master:
    container_name: kafka-streaming-spark-master
    <<: *spark-common
    entrypoint: ./entrypoint.sh --workload master --master-host kafka-streaming-spark-master --master-port 7077 --master-webui-port 8080
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8080" ]
      interval: 5s
      timeout: 3s
      retries: 3
    ports:
      - '8080:8080' # Spark master Web UI
      - '7077:7077' # For spark-node-to-spark-node queries
      - '4040:4040' # Spark worker data
      - '8889:8889' # Optionaly - Jupyter web UI

  spark-history-server:
    container_name: kafka-streaming-spark-history
    <<: *spark-common
    entrypoint: ['./entrypoint.sh', '--workload', 'history']
    depends_on:
      - spark-master
    ports:
      - '18080:18080'

  spark-worker-1:
    container_name: kafka-streaming-spark-worker-1
    <<: *spark-common
    entrypoint: ./entrypoint.sh --workload worker --master-host kafka-streaming-spark-master --master-port 7077 --worker-cores 4 --worker-memory 2g --worker-webui-port 8081
    depends_on:
      - spark-master
    ports:
      - '8081:8081'

  spark-worker-2:
    container_name: kafka-streaming-spark-worker-2
    <<: *spark-common
    entrypoint: ./entrypoint.sh --workload worker --master-host kafka-streaming-spark-master --master-port 7077 --worker-cores 4 --worker-memory 2g --worker-webui-port 8081
    depends_on:
      - spark-master
    ports:
      - '8082:8081'

  spark-worker-3:
    container_name: kafka-streaming-spark-worker-3
    <<: *spark-common
    entrypoint: ./entrypoint.sh --workload worker --master-host kafka-streaming-spark-master --master-port 7077 --worker-cores 4 --worker-memory 2g --worker-webui-port 8081
    depends_on:
      - spark-master
    ports:
      - '8083:8081'

  controller-1:
    image: apache/kafka:4.0.0
    container_name: controller-1
    environment:
      - KAFKA_NODE_ID=1
      - KAFKA_PROCESS_ROLES=controller
      - KAFKA_LISTENERS=CONTROLLER://:9093
      - KAFKA_INTER_BROKER_LISTENER_NAME=PLAINTEXT
      - KAFKA_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_CONTROLLER_QUORUM_VOTERS=1@controller-1:9093,2@controller-2:9093
      - KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR=2
      - KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR=2
      - KAFKA_TRANSACTION_STATE_LOG_MIN_ISR=2
      - KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS=0
      - KAFKA_NUM_PARTITIONS=3
    networks:
      - kafka-streaming
    volumes:
      - controller_data_1:/var/lib/kafka/data

  controller-2:
    image: apache/kafka:4.0.0
    container_name: controller-2
    environment:
      - KAFKA_NODE_ID=2
      - KAFKA_PROCESS_ROLES=controller
      - KAFKA_LISTENERS=CONTROLLER://:9093
      - KAFKA_INTER_BROKER_LISTENER_NAME=PLAINTEXT
      - KAFKA_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_CONTROLLER_QUORUM_VOTERS=1@controller-1:9093,2@controller-2:9093
      - KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR=2
      - KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR=2
      - KAFKA_TRANSACTION_STATE_LOG_MIN_ISR=2
      - KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS=0
      - KAFKA_NUM_PARTITIONS=3
    networks:
      - kafka-streaming
    volumes:
      - controller_data_2:/var/lib/kafka/data

  broker-1:
    image: apache/kafka:4.0.0
    container_name: broker-1
    depends_on:
      - controller-1
      - controller-2
    ports:
      - "29092:9092"
    environment:
      KAFKA_BROKER_ID: 3
      KAFKA_PROCESS_ROLES: broker
      KAFKA_LISTENERS: PLAINTEXT://:19092,PLAINTEXT_HOST://:9092
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://broker-1:19092,PLAINTEXT_HOST://localhost:29092
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_CONTROLLER_QUORUM_VOTERS: 1@controller-1:9093,2@controller-2:9093
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
    volumes:
      - broker_data_1:/var/lib/kafka/data
    networks:
      - kafka-streaming

  broker-2:
    image: apache/kafka:4.0.0
    container_name: broker-2
    depends_on:
      - controller-1
      - controller-2
    ports:
      - "39092:9092"
    environment:
      KAFKA_BROKER_ID: 4
      KAFKA_PROCESS_ROLES: broker
      KAFKA_LISTENERS: PLAINTEXT://:19092,PLAINTEXT_HOST://:9092
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://broker-2:19092,PLAINTEXT_HOST://localhost:39092
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_CONTROLLER_QUORUM_VOTERS: 1@controller-1:9093,2@controller-2:9093
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
    volumes:
      - broker_data_2:/var/lib/kafka/data
    networks:
      - kafka-streaming

  schema-registry:
    image: confluentinc/cp-schema-registry:7.4.0
    container_name: schema-registry
    depends_on:
      - controller-1
      - controller-2
    ports:
      - "18084:8084"
    environment:
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: broker-1:19092,broker-2:19092
      SCHEMA_REGISTRY_LISTENERS: "http://0.0.0.0:18084"
      SCHEMA_REGISTRY_HOST_NAME: "schema-registry"
      SCHEMA_REGISTRY_KAFKASTORE_TOPIC: _schemas
    networks:
      - kafka-streaming

  console:
    image: docker.redpanda.com/redpandadata/console:v2.5.2
    entrypoint: /bin/sh
    command: -c 'echo "$$CONSOLE_CONFIG_FILE" > /tmp/config.yml && echo "$$CONSOLE_ROLEBINDINGS_CONFIG_FILE" > /tmp/role-bindings.yml && /app/console'
    depends_on:
      - schema-registry
    ports:
      - "9090:9090"
    environment:
      CONFIG_FILEPATH: ${CONFIG_FILEPATH:-/tmp/config.yml}
      CONSOLE_CONFIG_FILE: |
        kafka:
          brokers: ["broker-1:19092", "broker-2:19092"]
          schemaRegistry:
            urls: ["http://schema-registry:18084"]
        redpanda:
          adminApi:
            urls: ["http://kafka_broker:9644"]
        connect:
          clusters:
            - name: local-connect-cluster
              url: http://connect:8083
      CONSOLE_ROLEBINDINGS_CONFIG_FILE: |
        roleBindings:
        - metadata:
            name: Platform Ops
          subjects:
            - kind: user
              provider: Plain
              name: jane
          roleName: admin
        - metadata:
            name: Software Engineers
          subjects:
            - kind: user
              provider: Plain
              name: john
          roleName: editor
    volumes:
      - ./config:/tmp/config/
    networks:
      - kafka-streaming

volumes:
  spark-events:
  controller_data_1:
  controller_data_2:
  broker_data_1:
  broker_data_2:
  postgres-db-volume:

networks:
  kafka-streaming:
    driver: bridge
